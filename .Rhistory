install.packages("slidify")
install.packages("devtools")
find.package("devtools")
install.packages("devtools")
find.package("devtools")
library(devtools)
find_rtools()
str(mapply)
?mapply
x <- c(rnorm(10), runif(10), rnorm(10,1))
x
log(-1)
clc()
library(datasets)
data(iris)
?iris
iris
summary(iris)
mean(iris$Sepal.Length, iris$Species == virginica)
iris[iris$Species == virginica]
iris[,iris$Species == virginica]
iris[,iris$Species == "virginica"]
split(iris)
iris[[,iris$Species == "virginica"]]
iris[[iris$Species == "virginica"]]
iris
iris$Sepal.Length
iris$Species
?mapply
mapply(mean(), iris$Sepal.Length, iris$Species)
mapply(mean, iris$Sepal.Length, iris$Species)
mapply(mean, iris$Sepal.Lengt iris$Species)
mapply(mean, iris$Sepal.Length, iris$Species)
?tapply
?lapply
summary(iris)
colMeans(iris)
rowMeans(iris[,1:4])
apply(iris,1,mean)
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
apply(iris,2,mean)
?apply
apply(iris[,iris$Species == virginica],2,mean)
iris$Species == virginica
?split
summary(iris)
f <- c(setosa, versicolor, virginica)
f <- c("setosa", "versicolor", "virginica")
f
split(iris$Species, f)
split(iris$Species, f, drop = TRUE)
h <- split(iris$Species, f, drop = TRUE)
h
iris$Species
split(iris$Species)
split(iris$Species, c("setosa", "versicolor", "virginica"))
iris$Species
iris[100:150,5]
iris[101:150,5]
apply(iris[101:150,5],2,mean)
apply(iris[,iris$Species == virginica],2,mean)
apply(iris[,1:4],2,mean)
apply(iris[101:150,5],2,mean)
iris$especies[101:150,5]
iris$Species[101:150,5]
iris$Species[101:150]
h <- iris$Species[101:150]
g <- iris[iris$Species[101:150]]
g
apply(g,2,mean)
g
iris
tapply(iris, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$mpg, mtcars$cyl,mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mtcars$cyl
mtcars$mpg
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg,cyl, mean))
tapply(mpg,cyl, mean)
mtcars
tapply(mtcars$hp, mtcars$cyl,mean)
debug(ls)
ls()
set.seed(1)
rpois(5,2)
?pnorm
?dpois
?ppois
clc()
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot(y)
plot(x,y)
summaryRprof()
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
library(ggplot2)
str(mpg)
qplot(displ, hwy, mpg)
names(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
testdat <- data.frame(x = 1:100, y = rnorm(100))
testdat$x
testdat$y
testdat[50,2] <- 100
testdat$y
plot(testdat$x, testdat$y, type = "l", ylim = c(-3,3))
plot(testdat$x, testdat$y, type = "l"
)
plot(testdat$x, testdat$y, type = "l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x = x, y = y))
library(ggplot2)
g <- ggplot(testdat, aes(x = x, y = y))
g
print(g)
g + geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = (-3,3))
g + geom_line() + coord_cartesian(ylim = c(-3,3))
?geom_text
library(ggplot2)
?geom_text
?panel.abline
?lline
panel.lline
install.packages("RColorBrewer")
library(RColorBrewer)
setwd("~/Dropbox/INPE/coursera/Reproducible Research/week2/RepData_PeerAssessment1")
stepsPerDay <- aggregate(steps ~ date, data = personalMovement, sum)
library(data.table)
library(ggplot2)
library(dtplyr)
# reading data
personalMovement <- fread("activity.csv")
# Coersing string characters of Date collumn to objects from classe Date
personalMovement$date <- as.Date(personalMovement$date)
stepsPerDay <- aggregate(steps ~ date, data = personalMovement, sum)
stepsPerInterval <- aggregate(steps ~ interval, data = personalMovement, mean)
personalMovement[is.na(personalMovement)]
personalMovement[is.na(personalMovement),]
personalMovement[!is.na(personalMovement),]
personalMovement[,is.na(personalMovement)]
personalMovement[,!is.na(personalMovement)]
personalMovement[!is.na(personalMovement$steps),]
nasRows <- !is.na(personalMovement$steps)
personalMovement[nasRows,]
personalMovement[nasRows,] <- lapply(personalMovement[nasRows,], function(x) personalMovement[[x]][match(personalMovement$interval, stepsPerInterval$interval)])
stepsPerInterval[match(personalMovement$interval, stepsPerInterval$interval),]$steps
stepsPerInterval[match(personalMovement$interval, stepsPerInterval$interval)]$steps
stepsPerInterval[match(personalMovement$interval, stepsPerInterval$interval),]
personalMovement[nasRows,]
personalMovement[nasRows,]$interval
stepsPerInterval[match(personalMovement[nasRows,]$interval, stepsPerInterval$interval),]$steps
stepsPerInterval[match(personalMovement[nasRows,]$interval, stepsPerInterval$interval),]
match(personalMovement[nasRows,]$interval, stepsPerInterval$interval)
personalMovement[nasRows,]$interval
personalMovement[nasRows,]
tmpdata <- personalMovement[nasRows,]
tmpdata <- personalMovement[!nasRows,]
nasRows <- is.na(personalMovement$steps)
personalMovement[nasRows,]
rm(tmpdata)
personalMovement[nasRows,] <- lapply(personalMovement[nasRows,], function(x) personalMovement[[x]][match(personalMovement$interval, stepsPerInterval$interval)])
match(personalMovement[nasRows,]$interval, stepsPerInterval$interval)
stepsPerInterval[match(personalMovement[nasRows,]$interval, stepsPerInterval$interval),]$steps
personalMovement$steps <- stepsPerInterval[match(personalMovement[nasRows,]$interval, stepsPerInterval$interval),]$steps
View(personalMovement)
# reading data
personalMovement <- fread("activity.csv")
# Coersing string characters of Date collumn to objects from classe Date
personalMovement$date <- as.Date(personalMovement$date)
View(personalMovement)
personalMovement <- stepsPerInterval[match(personalMovement[nasRows,]$interval, stepsPerInterval$interval),]$steps
# reading data
personalMovement <- fread("activity.csv")
# Coersing string characters of Date collumn to objects from classe Date
personalMovement$date <- as.Date(personalMovement$date)
personalMovement[nasRows,]$steps <- stepsPerInterval[match(personalMovement[nasRows,]$interval, stepsPerInterval$interval),]$steps
View(personalMovement)
header(personalMovement)
head(personalMovement)
View(stepsPerInterval)
class(personalMovement$steps)
class(stepsPerInterval$steps)
as.numeric(personalMovement$steps)
class(stepsPerInterval$steps)
class(personalMovement$steps)
personalMovement$steps <- as.numeric(personalMovement$steps)
class(personalMovement$steps)
personalMovement[nasRows,]$steps <- stepsPerInterval[match(personalMovement[nasRows,]$interval, stepsPerInterval$interval),]$steps
View(personalMovement)
max(personalMovement$steps)
View(stepsPerDay)
# reading data
personalMovement <- fread("activity.csv")
# Coersing string characters of Date collumn to objects from classe Date
personalMovement$date <- as.Date(personalMovement$date)
# Coersing integers of steps collumn to numeric
personalMovement$steps <- as.numeric(personalMovement$steps)
personalMovement1 <- personalMovement
personalMovement1[nasRows,]$steps <- stepsPerInterval[match(personalMovement[nasRows,]$interval, stepsPerInterval$interval),]$steps
personalMovement2 <- personalMovement
personalMovement2[nasRows,]$steps <- stepsPerDay[match(personalMovement[nasRows,]$date, stepsPerDay$date),]$steps
summary(personalMovement)
View(stepsPerDay)
stepsPerDay$steps <- as.numeric(stepsPerDay$steps)
personalMovement2 <- personalMovement
personalMovement2[nasRows,]$steps <- stepsPerDay[match(personalMovement[nasRows,]$date, stepsPerDay$date),]$steps
summary(personalMovement)
personalMovement2 <- personalMovement
personalMovement2[nasRows,]$steps <- stepsPerDay[match(personalMovement[nasRows,]$date, stepsPerDay$date),]$steps
summary(personalMovement2)
View(personalMovement2)
match(personalMovement[nasRows,]$date, stepsPerDay$date)
personalMovement[nasRows,]$date
stepsPerDay$date
